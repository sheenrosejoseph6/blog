// Centered container element
// ------------------------------------------
// Head's up! Make sure maximum width is set later in a media query.
// IE8 box model will break if min- and max- widths are set on this element.
@mixin create-container($class-name: container) {
  position: relative;
  @include rem-fallback(padding-left, ($grid-gutter-width / 2));
  @include rem-fallback(padding-right, ($grid-gutter-width / 2));
  margin-right: auto;
  margin-left: auto;
  // Fix for nested containers
  .#{$class-name} {
    width: auto !important;
  }
}

// Create a row
// ------------------------------------------
@mixin create-rows($gutter: $grid-gutter-width) {
  position: relative;
  width: auto;
  @include rem-fallback(margin-left, ($gutter / -2));
  @include rem-fallback(margin-right, ($gutter / -2));
}

@mixin calc-grid($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

@mixin loop-grid($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid($i, $class, $type);
  }
}

// Create grid for specific class
@mixin create-grid($class) {
  @include loop-grid($grid-columns, $class, width);
  @include loop-grid($grid-columns, $class, pull);
  @include loop-grid($grid-columns, $class, push);
  @include loop-grid($grid-columns, $class, offset);
}

// For non-responsive sites 
@mixin create-static-grid($columns) {
  @for $i from 0 through $columns {
    .col-#{$i} {
      @extend .col;
      width: percentage(($i / $grid-columns));
    }
    .push-#{$i} {
      left: percentage(($i / $grid-columns));
    }
    .pull-#{$i} {
      right: percentage(($i / $grid-columns));
    }
    .offset-#{$i} {
      margin-left: percentage(($i / $grid-columns));
    }
  }
}